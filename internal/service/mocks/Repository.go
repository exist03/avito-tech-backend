// Code generated by mockery v2.33.0. DO NOT EDIT.

package mocks

import (
	internal "avito-tech-backend/internal"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, segment
func (_m *Repository) Create(ctx context.Context, segment internal.Segment) error {
	ret := _m.Called(ctx, segment)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, internal.Segment) error); ok {
		r0 = rf(ctx, segment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Repository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - segment internal.Segment
func (_e *Repository_Expecter) Create(ctx interface{}, segment interface{}) *Repository_Create_Call {
	return &Repository_Create_Call{Call: _e.mock.On("Create", ctx, segment)}
}

func (_c *Repository_Create_Call) Run(run func(ctx context.Context, segment internal.Segment)) *Repository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(internal.Segment))
	})
	return _c
}

func (_c *Repository_Create_Call) Return(_a0 error) *Repository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_Create_Call) RunAndReturn(run func(context.Context, internal.Segment) error) *Repository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, segmentId
func (_m *Repository) Delete(ctx context.Context, segmentId int) error {
	ret := _m.Called(ctx, segmentId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, segmentId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Repository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - segmentId int
func (_e *Repository_Expecter) Delete(ctx interface{}, segmentId interface{}) *Repository_Delete_Call {
	return &Repository_Delete_Call{Call: _e.mock.On("Delete", ctx, segmentId)}
}

func (_c *Repository_Delete_Call) Run(run func(ctx context.Context, segmentId int)) *Repository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *Repository_Delete_Call) Return(_a0 error) *Repository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_Delete_Call) RunAndReturn(run func(context.Context, int) error) *Repository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, userId
func (_m *Repository) Get(ctx context.Context, userId int) ([]internal.Segment, error) {
	ret := _m.Called(ctx, userId)

	var r0 []internal.Segment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]internal.Segment, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []internal.Segment); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]internal.Segment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Repository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - userId int
func (_e *Repository_Expecter) Get(ctx interface{}, userId interface{}) *Repository_Get_Call {
	return &Repository_Get_Call{Call: _e.mock.On("Get", ctx, userId)}
}

func (_c *Repository_Get_Call) Run(run func(ctx context.Context, userId int)) *Repository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *Repository_Get_Call) Return(_a0 []internal.Segment, _a1 error) *Repository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_Get_Call) RunAndReturn(run func(context.Context, int) ([]internal.Segment, error)) *Repository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetHistory provides a mock function with given fields: ctx, timeBegin, timeEnd, userId
func (_m *Repository) GetHistory(ctx context.Context, timeBegin int64, timeEnd int64, userId int) (string, error) {
	ret := _m.Called(ctx, timeBegin, timeEnd, userId)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int) (string, error)); ok {
		return rf(ctx, timeBegin, timeEnd, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int) string); ok {
		r0 = rf(ctx, timeBegin, timeEnd, userId)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, int) error); ok {
		r1 = rf(ctx, timeBegin, timeEnd, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHistory'
type Repository_GetHistory_Call struct {
	*mock.Call
}

// GetHistory is a helper method to define mock.On call
//   - ctx context.Context
//   - timeBegin int64
//   - timeEnd int64
//   - userId int
func (_e *Repository_Expecter) GetHistory(ctx interface{}, timeBegin interface{}, timeEnd interface{}, userId interface{}) *Repository_GetHistory_Call {
	return &Repository_GetHistory_Call{Call: _e.mock.On("GetHistory", ctx, timeBegin, timeEnd, userId)}
}

func (_c *Repository_GetHistory_Call) Run(run func(ctx context.Context, timeBegin int64, timeEnd int64, userId int)) *Repository_GetHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64), args[3].(int))
	})
	return _c
}

func (_c *Repository_GetHistory_Call) Return(_a0 string, _a1 error) *Repository_GetHistory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetHistory_Call) RunAndReturn(run func(context.Context, int64, int64, int) (string, error)) *Repository_GetHistory_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, req
func (_m *Repository) Update(ctx context.Context, req internal.UpdateRequest) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, internal.UpdateRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type Repository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - req internal.UpdateRequest
func (_e *Repository_Expecter) Update(ctx interface{}, req interface{}) *Repository_Update_Call {
	return &Repository_Update_Call{Call: _e.mock.On("Update", ctx, req)}
}

func (_c *Repository_Update_Call) Run(run func(ctx context.Context, req internal.UpdateRequest)) *Repository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(internal.UpdateRequest))
	})
	return _c
}

func (_c *Repository_Update_Call) Return(_a0 error) *Repository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_Update_Call) RunAndReturn(run func(context.Context, internal.UpdateRequest) error) *Repository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
